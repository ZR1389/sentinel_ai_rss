from fpdf import FPDF
from datetime import date
from threat_scorer import assess_threat_level
from rss_processor import get_clean_alerts
from plan_rules import PLAN_RULES
import json
import os
from dotenv import load_dotenv
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from email.mime.text import MIMEText
from chat_handler import get_plan

load_dotenv()

SENDER_EMAIL = os.getenv("SENDER_EMAIL")
SENDER_PASSWORD = os.getenv("SENDER_PASSWORD")

# ✅ Generate PDF Report
def generate_pdf(email, alerts, plan):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, f"Sentinel AI Daily Brief — {date.today().isoformat()}", ln=True, align='C')
    pdf.ln(10)

    for alert in alerts:
        title = alert.get("title", "Untitled")
        summary = alert.get("summary", "")
        level = assess_threat_level(f"{title}: {summary}")
        pdf.set_font("Arial", "B", 12)
        pdf.cell(0, 10, f"{title}", ln=True)
        pdf.set_font("Arial", "", 11)
        pdf.multi_cell(0, 8, f"{summary}\nThreat Level: {level}\n")
        pdf.ln(2)

    filename = f"report_{email}_{date.today().isoformat()}.pdf"
    pdf.output(filename)
    return filename

# ✅ Email Report to Client
def send_pdf_report(email, plan):
    pdf_permission = PLAN_RULES.get(plan, {}).get("pdf", False)
    if not pdf_permission:
        raise PermissionError(f"❌ {plan} plan does not allow PDF report access.")

    alerts = get_clean_alerts()
    pdf_file = generate_pdf(email, alerts, plan)

    msg = MIMEMultipart()
    msg["From"] = SENDER_EMAIL
    msg["To"] = email
    msg["Subject"] = f"Sentinel AI Report — {plan} Plan"

    body = f"Attached is your travel safety report generated by Sentinel AI ({plan} Plan). Stay safe and informed."
    msg.attach(MIMEText(body, "plain"))

    with open(pdf_file, "rb") as f:
        part = MIMEApplication(f.read(), Name=pdf_file)
        part['Content-Disposition'] = f'attachment; filename="{pdf_file}"'
        msg.attach(part)

    server = smtplib.SMTP("smtp.gmail.com", 587)
    server.starttls()
    server.login(SENDER_EMAIL, SENDER_PASSWORD)
    server.send_message(msg)
    server.quit()

    os.remove(pdf_file)  # ✅ Clean up
    return True

# ✅ Send All Daily Summaries (called via cron)
def send_daily_summaries():
    with open("clients.json", "r") as f:
        clients = json.load(f)

    for client in clients:
        email = client["email"]
        plan = client.get("plan", "FREE")
        try:
            if PLAN_RULES.get(plan, {}).get("pdf", False):
                send_pdf_report(email=email, plan=plan)
                print(f"✅ Sent report to {email} ({plan})")
            else:
                print(f"⏩ Skipped {email} — no PDF access ({plan})")
        except Exception as e:
            print(f"❌ Error sending to {email}: {str(e)}")
