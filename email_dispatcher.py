from fpdf import FPDF
from datetime import date
from threat_scorer import assess_threat_level
from rss_processor import get_clean_alerts
from plan_rules import PLAN_RULES
import json
import os
from dotenv import load_dotenv
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from email.mime.text import MIMEText
from chat_handler import get_plan
import re

load_dotenv()

SENDER_EMAIL = os.getenv("SENDER_EMAIL")
SENDER_PASSWORD = os.getenv("SENDER_PASSWORD")
SMTP_SERVER = os.getenv("SMTP_SERVER")
SMTP_PORT = int(os.getenv("SMTP_PORT"))

PDF_ALERT_LIMIT = 5  # Max alerts per PDF/report

def sanitize_filename(email):
    # Remove dangerous/special chars for filesystem
    return re.sub(r"[^a-zA-Z0-9_.-]", "_", email)

def generate_pdf(email, alerts, plan):
    class PDF(FPDF):
        def header(self):
            self.set_font("Noto", "B", 16)
            self.set_text_color(237, 0, 0)
            heading = "Sentinel AI Daily Brief"
            self.cell(0, 10, f"{heading} — {date.today().isoformat()}", ln=True, align='C')
            self.ln(10)

        def chapter_body(self, alerts):
            for alert in alerts:
                self.set_text_color(0)
                self.set_font("Noto", "B", 12)
                self.multi_cell(0, 10, f"{alert['title']}", align='L')

                level_color = get_threat_color(alert["level"])
                self.set_text_color(100, 100, 100)
                self.set_font("Noto", "I", 11)
                self.cell(0, 8, f"Source: {alert['source']}", ln=True)

                self.set_text_color(*level_color)
                self.cell(0, 8, f"Threat Level: {alert['level']}", ln=True)

                self.set_text_color(0)
                self.set_font("Noto", "", 12)
                self.multi_cell(0, 10, f"{alert['summary']}", align='L')

                if alert["link"]:
                    self.set_text_color(0, 0, 255)
                    self.set_font("Noto", "", 11)
                    self.cell(0, 10, alert["link"], ln=True, link=alert["link"])

                self.set_font("Noto", "", 12)
                self.set_text_color(0)
                self.ln(6)

    def get_threat_color(level):
        if level == "Low":
            return (0, 150, 0)
        elif level == "Moderate":
            return (255, 165, 0)
        elif level == "High":
            return (255, 0, 0)
        elif level == "Critical":
            return (139, 0, 0)
        else:
            return (100, 100, 100)

    alerts = alerts[:PDF_ALERT_LIMIT]
    scored_alerts = []
    for alert in alerts:
        level = assess_threat_level(f"{alert['title']}: {alert['summary']}")
        scored_alerts.append({
            "title": alert["title"],
            "summary": alert["summary"],
            "source": alert["source"],
            "link": alert["link"],
            "level": level
        })

    pdf = PDF()
    pdf.add_font("Noto", "", "fonts/NotoSans-Regular.ttf", uni=True)
    pdf.add_font("Noto", "B", "fonts/NotoSans-Regular.ttf", uni=True)
    pdf.add_font("Noto", "I", "fonts/NotoSans-Regular.ttf", uni=True)

    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()
    pdf.chapter_body(scored_alerts)

    safe_email = sanitize_filename(email)
    filename = f"report_{safe_email}_{date.today().isoformat()}.pdf"
    pdf.output(filename)
    return filename

def send_pdf_report(email, plan):
    plan_norm = plan.upper() if isinstance(plan, str) else "FREE"
    if not PLAN_RULES.get(plan_norm, {}).get("pdf", False):
        raise PermissionError(f"{plan_norm} plan does not allow PDF report access.")

    alerts = get_clean_alerts()
    pdf_file = generate_pdf(email, alerts, plan)

    msg = MIMEMultipart()
    msg["From"] = SENDER_EMAIL
    msg["To"] = email
    msg["Subject"] = f"Sentinel AI Report — {plan_norm} Plan"

    body = (
        f"Attached is your travel safety report generated by Sentinel AI ({plan_norm} Plan).\n"
        f"Stay safe and informed.\n"
    )
    msg.attach(MIMEText(body, "plain"))

    try:
        with open(pdf_file, "rb") as f:
            part = MIMEApplication(f.read(), Name=os.path.basename(pdf_file))
            part['Content-Disposition'] = f'attachment; filename="{os.path.basename(pdf_file)}"'
            msg.attach(part)

        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.send_message(msg)
        server.quit()
    finally:
        if os.path.exists(pdf_file):
            os.remove(pdf_file)
    return True

def send_daily_summaries():
    with open("clients.json", "r") as f:
        clients = json.load(f)

    for client in clients:
        email = client["email"]
        plan = client.get("plan", "FREE")
        try:
            plan_norm = plan.upper() if isinstance(plan, str) else "FREE"
            if PLAN_RULES.get(plan_norm, {}).get("pdf", False):
                send_pdf_report(email=email, plan=plan_norm)
                print(f"Sent report to {email} ({plan_norm})")
            else:
                print(f"Skipped {email} — no PDF access ({plan_norm})")
        except Exception as e:
            print(f"Error sending to {email}: {str(e)}")